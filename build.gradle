buildscript {
    repositories {
        mavenCentral()
		mavenLocal()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = 'ForgeFS'
            url = 'http://files.minecraftforge.net/maven'
        }
		maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.0-SNAPSHOT'
    }
}

apply plugin: 'forge'
ext.buildProps = file "build.properties"

buildProps.withReader {
    def prop = new Properties()
    prop.load(it)
    ext.config = new ConfigSlurper().parse prop
}

group = "mineapi"
archivesBaseName = "mineapi"

minecraft {
    version = "${config.version.minecraft}-${config.version.forge}"
}

processResources {
	from 'build.properties'
}

task copyBuildXml(type: Copy) {
    from 'build.properties'
    into 'output'
}

jar {
    dependsOn copyBuildXml
    classifier = 'universal'
    destinationDir = file 'output'
}

repositories {
    maven {
        name 'ForgeFS'
        url 'http://files.minecraftforge.net/maven'
     }
}

dependencies {
	compile fileTree(dir: 'lib', includes: ['*.jar']) 
}

build.dependsOn "copyBuildXml"

wrapper {
    version = "1.8"
}

task("buildapi", type: Zip) {
    description = 'Builds MineAPI Re-distributable Zip'
	destinationDir = file 'output'
	
	// Copy over default eclipse project data.
	logger.lifecycle "Copying default Eclipse project information..."
	into('eclipse'){ from fileTree('eclipse/default/'){exclude 'readme.txt'} }

    // Grab all the files that make up a client installation.
	logger.lifecycle "Packing API files and Gradle build script..."
    from('.')
	{
        include 'src/**'
		include 'gradle/**'
		include 'lib/**'
		include 'eclipse/default/**'
		include 'eclipse/dump/**'
		include 'eclipse/mods-extra/**'
		include '.gitignore'
		include 'build.gradle'
		include 'build.properties'
		include 'gradlew'
		include 'gradlew.bat'
		include 'build_arguments.txt'
		include 'clean.bat'
		include 'compile.bat'
		include 'install.bat'
		include 'compile_api.bat'
		exclude 'src/main/resources/*.json'
    }
	
	// Do not get empty directories from which no files are included.
    includeEmptyDirs = false

    // info output.
    eachFile { file -> logger.lifecycle "packing $file" }

	// Set build number to default if environment variable does not exist.
	if (System.getenv("BUILD_NUMBER") != null) {
		// Replace the MineAPI version number in the build properties.
		logger.lifecycle "Opening existing build properties file..."
		String jenkinsBuild = new File('build.properties').getText( 'UTF-8')
		jenkinsBuild = jenkinsBuild.replaceAll( "version.mineapi=" + "${config.version.mineapi}", "version.mineapi=1." + "${System.getenv("BUILD_NUMBER")}" )
		
		// Create the new file that will take its place.
		logger.lifecycle "Saving updated build properties file with Jenkins build number..."
		new File('build.properties').write(jenkinsBuild, 'UTF-8')
	
		// Create file name based on build number from Jenkins.
		logger.lifecycle "Using version from environment variable..."
		baseName = "/MineAPI-M${config.version.minecraft}-F${config.version.forge}-V1.${System.getenv("BUILD_NUMBER")}"
	}
	else {
		logger.lifecycle "Using version from build properties..."
		baseName = "/MineAPI-M${config.version.minecraft}-F${config.version.forge}-V${config.version.mineapi}"
	}

    // Logging is always important.
	doLast { logger.lifecycle "MineAPI Re-distributable Created: $archivePath" }
}